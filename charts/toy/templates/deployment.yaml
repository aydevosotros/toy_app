### QAPI DEPLOYMENT ###
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "toy.fullname" . }}
  labels:
    {{- include "toy.labels" . | nindent 4 }}
spec:
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  selector:
    matchLabels:
      {{- include "toy.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "toy.labels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "toy.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.name }}:{{ .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - mountPath: "/run/secrets/rabbitmq"
              name: rabbitmq-secrets
              readOnly: true
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: rabbitmq-secrets
          secret:
            secretName: rabbitmq-secrets
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
---
### DB MySQL ###
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "toy.fullname" . }}-mysql
  labels:
    {{- include "toy.db-labels" . | nindent 4 }}
spec:
  serviceName: mysql
  selector:
    matchLabels:
      {{- include "toy.db-selectorLabels" . | nindent 6}}
  replicas: 1
  template:
    metadata:
      labels:
        {{- include "toy.db-labels" . | nindent 8}}
      name: {{ include "toy.fullname" . }}-mysql
    spec:
      containers:
      - image: mysql:5.7
        name: {{ include "toy.fullname" . }}-mysql
        env:
          # Use secret in real usage
        - name: MYSQL_ROOT_PASSWORD
          value: password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
          - mountPath: "/etc/mysql"
            name: my-cnf
          - mountPath: "/var/lib/mysql"
            name: mysql-pv-claim
        resources:
          limits:
            cpu: "800m"
            memory: "1Gi"
          requests:
            cpu: "100m"
            memory: "128Mi"
      nodeSelector:
        topology.kubernetes.io/zone: us-west-2a
      volumes:
        - name: my-cnf
          configMap:
            name: mysql-config-{{- include "toy.name" . }}
            items:
            - key: my-cnf
              path: my.cnf
  volumeClaimTemplates:
    - metadata:
        name: mysql-pv-claim
      spec:
        storageClassName: ebs-retain
        volumeName: toy-mysql-volume
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
---
### REDIS DEPLOYMENT ###
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  labels:
    app: redis
    version: {{ .Chart.AppVersion | quote }}
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        version: {{ .Chart.AppVersion | quote }}
      name: redis
    spec:
      containers:
        - name: redis-toy
          image: redis:4
          ports:
            - containerPort: 6379
              name: redis-default
        - name: redis-exporter
          image: bitnami/redis-exporter
          ports:
            - containerPort: 9121
              name: http-metrics
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
---
### RABBITMQ ###
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  labels:
    app: rabbitmq
    version: {{ .Chart.AppVersion | quote }}
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      name: rabbitmq
      labels:
        app: rabbitmq
        version: {{ .Chart.AppVersion | quote }}
        app.kubernetes.io/name: rabbitmq
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
        - name: rabbitmq-management
          image: rabbitmq:3.8.9-management
          env:
            - name: RABBITMQ_DEFAULT_USER_FILE
              value: "/run/secrets/rabbitmq/rabbit_user"
            - name: RABBITMQ_DEFAULT_PASS_FILE
              value: "/run/secrets/rabbitmq/rabbit_pass"
            - name: RABBITMQ_DEFAULT_VHOST
              value: "toy"
          volumeMounts:
            - mountPath: "/run/secrets/rabbitmq"
              name: rabbitmq-secrets
              readOnly: true
          ports:
            - containerPort: 5672
              protocol: TCP
              name: amqp
            - containerPort: 15672
              protocol: TCP
              name: http
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
      volumes:
        - name: rabbitmq-secrets
          secret:
            secretName: rabbitmq-secrets
---
### CELERY SCHEDULER ###
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-scheduler
  labels:
    app: celery-scheduler
    version: {{ .Chart.AppVersion | quote }}
    app.kubernetes.io/name: celery-scheduler
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  selector:
    matchLabels:
      app: celery-scheduler
  template:
    metadata:
      name: celery-scheduler
      labels:
        app: celery-scheduler
        version: {{ .Chart.AppVersion | quote }}
        app.kubernetes.io/name: celery-scheduler
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
        - name: celery-scheduler
          image: "{{ .Values.image.name }}:{{ .Chart.AppVersion }}"
          command: ["/bin/sh"]
          args: ["-c", "celery -A toy_app.task beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler"]
          volumeMounts:
            - mountPath: "/run/secrets/rabbitmq"
              name: rabbitmq-secrets
              readOnly: true
      volumes:
        - name: rabbitmq-secrets
          secret:
            secretName: rabbitmq-secrets
---
### CELERY WORKERS ###
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-worker
  labels:
    app: celery-worker
    version: {{ .Chart.AppVersion | quote }}
    app.kubernetes.io/name: celery-worker
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  selector:
    matchLabels:
      app: celery-worker
  template:
    metadata:
      name: celery-worker
      labels:
        app: celery-worker
        version: {{ .Chart.AppVersion | quote }}
        app.kubernetes.io/name: celery-worker
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
        - name: celery-worker
          image: "{{ .Values.image.name }}:{{ .Chart.AppVersion }}"
          command: ["/bin/sh"]
          args: ["-c", "celery -A toy_app.task worker --loglevel=info"]
          volumeMounts:
            - mountPath: "/run/secrets/rabbitmq"
              name: rabbitmq-secrets
              readOnly: true
      volumes:
        - name: rabbitmq-secrets
          secret:
            secretName: rabbitmq-secrets
---
### DOCS ###
apiVersion: apps/v1
kind: Deployment
metadata:
  name: docs
  labels:
    app: docs
    version: {{ .Chart.AppVersion | quote }}
    app.kubernetes.io/name: docs
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  selector:
    matchLabels:
      app: docs
  template:
    metadata:
      labels:
        app: docs
        version: {{ .Chart.AppVersion | quote }}
        app.kubernetes.io/name: docs
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
        - name: docs
          image: "{{ .Values.image.name }}-docs:{{ .Chart.AppVersion }}"
          ports:
            - containerPort: 8000
              protocol: TCP
              name: http